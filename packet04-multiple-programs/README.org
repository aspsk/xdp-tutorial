# -*- fill-column: 76; -*-
#+TITLE: Tutorial: Packet04 - multiple programs
#+OPTIONS: ^:nil

* Table of Contents                                                     :TOC:
- [[#what-you-will-learn-in-this-lesson][What you will learn in this lesson]]
- [[#assignments][Assignments]]
  - [[#assignment-1-xxx][Assignment 1: XXX]]

* What you will learn in this lesson

In this lesson you will learn how to use multiple tailed XDP programs on one interface.

* Assignments

** Assignment 1: tail calls

Load programs:
#+begin_example
# ./xdp_loader -d $dev --force --filename ./xdp_prog_kern.o
Success: Loaded BPF-object(./xdp_prog_kern.o) and used section(xdp_entry)
 - XDP prog attached on device:enp3s0np0(ifindex:11)
 - Unpinning (remove) prev maps in /sys/fs/bpf/enp3s0np0/
 - Pinning maps in /sys/fs/bpf/enp3s0np0/
# ./xdp_prog_user -d $dev
map dir: /sys/fs/bpf/enp3s0np0
trying to load section: prog/0: id=0
#+end_example

Ping the host, send some UDP packets, and read the trace pipe:
#+begin_example
# cat /sys/kernel/debug/tracing/trace_pipe
...
          <idle>-0     [022] ..s. 8568026.436274: 0: meta is OK l4_header_offset=34 protocol=1 payload_len=64
          <idle>-0     [022] ..s. 8568026.436289: 0: returning 2
...
          <idle>-0     [022] ..s. 8568031.580204: 0: meta is OK l4_header_offset=34 protocol=17 payload_len=12
          <idle>-0     [022] ..s. 8568031.580214: 0: this is a UDP packet
          <idle>-0     [022] ..s. 8568031.580216: 0: returning 2
...
#+end_example

** Assignment 2: hardware offload

Load programs:
#+begin_example
# ip -force link set dev $dev xdpdrv obj xdp_prog_kern_off_tail.o sec xdp_tail
# ip -force link set dev $dev xdpoffload obj xdp_prog_kern_off.o sec xdp_entry_off
#+end_example

Ping the host, send some UDP or TCP packets, and read the trace pipe:
#+begin_example
# cat /sys/kernel/debug/tracing/trace_pipe
...
          <idle>-0     [004] ..s. 8568289.892293: 0: meta is OK l4_header_offset=34 protocol=17 payload_len=12
          <idle>-0     [004] ..s. 8568289.892303: 0: this is a UDP packet
          <idle>-0     [004] ..s. 8568289.892305: 0: returning 2
...
          <idle>-0     [000] ..s. 8568294.975420: 0: meta is OK l4_header_offset=34 protocol=1 payload_len=64
          <idle>-0     [000] ..s. 8568294.975430: 0: returning 2
...
          <idle>-0     [003] ..s. 8568366.547824: 0: meta is OK l4_header_offset=34 protocol=6 payload_len=20
          <idle>-0     [003] ..s. 8568366.547834: 0: this is a TCP packet
          <idle>-0     [003] ..s. 8568366.547836: 0: returning 2
...
#+end_example
